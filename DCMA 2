Option Explicit

Sub ScheduleHealthCheck()
    ' 14-Point Schedule Health Check Macro
    ' Based on DAU EVM and Schedule Health Analysis best practices
    
    Dim ws As Worksheet
    Dim resultsWs As Worksheet
    Dim lastRow As Long
    Dim totalTasks As Long
    Dim score As Double
    Dim checkResults(1 To 14) As String
    Dim checkScores(1 To 14) As Double
    Dim i As Integer
    
    ' Set the active worksheet
    Set ws = ActiveSheet
    
    ' Find last row with data
    lastRow = ws.Cells(ws.Rows.Count, 1).End(xlUp).Row
    If lastRow < 2 Then
        MsgBox "No data found in active worksheet!", vbExclamation
        Exit Sub
    End If
    
    totalTasks = lastRow - 1
    
    ' Create or clear results worksheet
    On Error Resume Next
    Application.DisplayAlerts = False
    Worksheets("Schedule Health Results").Delete
    Application.DisplayAlerts = True
    On Error GoTo 0
    
    Set resultsWs = Worksheets.Add(After:=ws)
    resultsWs.Name = "Schedule Health Results"
    
    ' Initialize results sheet headers
    With resultsWs
        .Range("A1").Value = "14-POINT SCHEDULE HEALTH CHECK RESULTS"
        .Range("A1").Font.Bold = True
        .Range("A1").Font.Size = 16
        
        .Range("A3").Value = "Check #"
        .Range("B3").Value = "Health Check Criteria"
        .Range("C3").Value = "Result"
        .Range("D3").Value = "Score"
        .Range("E3").Value = "Comments"
        .Range("A3:E3").Font.Bold = True
    End With
    
    ' Run all checks
    checkResults(1) = "Logic Check - Missing Dependencies"
    checkScores(1) = RunCheck1(ws, lastRow)
    
    checkResults(2) = "No Negative Lag Time"
    checkScores(2) = RunCheck2(ws, lastRow)
    
    checkResults(3) = "No Excessive Lags (>20 days)"
    checkScores(3) = RunCheck3(ws, lastRow)
    
    checkResults(4) = "Minimal Hard Constraints"
    checkScores(4) = RunCheck4(ws, lastRow)
    
    checkResults(5) = "Total Float Reasonableness"
    checkScores(5) = RunCheck5(ws, lastRow)
    
    checkResults(6) = "Critical Path Integrity"
    checkScores(6) = RunCheck6(ws, lastRow)
    
    checkResults(7) = "Task Duration Reasonableness"
    checkScores(7) = RunCheck7(ws, lastRow)
    
    checkResults(8) = "Resource Assignment Check"
    checkScores(8) = RunCheck8(ws, lastRow)
    
    checkResults(9) = "Baseline Date Variance"
    checkScores(9) = RunCheck9(ws, lastRow)
    
    checkResults(10) = "No Excessive Float (>44 days)"
    checkScores(10) = RunCheck10(ws, lastRow)
    
    checkResults(11) = "No Logic on Summary Tasks"
    checkScores(11) = RunCheck11(ws, lastRow)
    
    checkResults(12) = "Milestone Duration = 0"
    checkScores(12) = RunCheck12(ws, lastRow)
    
    checkResults(13) = "Adequate Schedule Margin"
    checkScores(13) = 0.9 ' Placeholder
    
    checkResults(14) = "Status Date Currency"
    checkScores(14) = RunCheck14(ws, lastRow)
    
    ' Write results
    For i = 1 To 14
        With resultsWs
            .Cells(i + 3, 1).Value = i
            .Cells(i + 3, 2).Value = checkResults(i)
            
            If checkScores(i) >= 0.95 Then
                .Cells(i + 3, 3).Value = "PASS"
                .Cells(i + 3, 3).Interior.Color = RGB(198, 239, 206)
            ElseIf checkScores(i) >= 0.8 Then
                .Cells(i + 3, 3).Value = "MARGINAL"
                .Cells(i + 3, 3).Interior.Color = RGB(255, 235, 156)
            Else
                .Cells(i + 3, 3).Value = "FAIL"
                .Cells(i + 3, 3).Interior.Color = RGB(255, 199, 206)
            End If
            
            .Cells(i + 3, 4).Value = Format(checkScores(i), "0%")
            .Cells(i + 3, 5).Value = GetComment(i, checkScores(i))
        End With
    Next i
    
    ' Calculate overall score
    score = 0
    For i = 1 To 14
        score = score + checkScores(i)
    Next i
    score = score / 14
    
    ' Add overall score
    With resultsWs
        .Range("A19").Value = "OVERALL SCHEDULE HEALTH SCORE:"
        .Range("A19").Font.Bold = True
        .Range("C19").Value = Format(score, "0%")
        .Range("C19").Font.Bold = True
        .Range("C19").Font.Size = 14
        
        If score >= 0.95 Then
            .Range("C19").Interior.Color = RGB(198, 239, 206)
            .Range("D19").Value = "EXCELLENT"
        ElseIf score >= 0.8 Then
            .Range("C19").Interior.Color = RGB(255, 235, 156)
            .Range("D19").Value = "GOOD - Minor Issues"
        ElseIf score >= 0.6 Then
            .Range("C19").Interior.Color = RGB(255, 213, 170)
            .Range("D19").Value = "FAIR - Needs Attention"
        Else
            .Range("C19").Interior.Color = RGB(255, 199, 206)
            .Range("D19").Value = "POOR - Major Issues"
        End If
        
        .Columns("A:E").AutoFit
    End With
    
    resultsWs.Activate
    
    MsgBox "Schedule Health Check Complete!" & vbCrLf & _
           "Overall Score: " & Format(score, "0%"), vbInformation
End Sub

' Check 1: Logic Check
Private Function RunCheck1(ws As Worksheet, lastRow As Long) As Double
    On Error Resume Next
    Dim i As Long, tasksWithoutLogic As Long, nonSummaryTasks As Long
    
    For i = 2 To lastRow
        If ws.Cells(i, 5).Value <> "Summary" Then
            nonSummaryTasks = nonSummaryTasks + 1
            If Len(Trim(ws.Cells(i, 10).Value & "")) = 0 And _
               Len(Trim(ws.Cells(i, 11).Value & "")) = 0 Then
                tasksWithoutLogic = tasksWithoutLogic + 1
            End If
        End If
    Next i
    
    If nonSummaryTasks > 0 Then
        RunCheck1 = 1 - (tasksWithoutLogic / nonSummaryTasks)
    Else
        RunCheck1 = 1
    End If
End Function

' Check 2: No Negative Lags
Private Function RunCheck2(ws As Worksheet, lastRow As Long) As Double
    On Error Resume Next
    Dim i As Long, leadsFound As Long, totalRelationships As Long
    Dim cellValue As String
    
    For i = 2 To lastRow
        cellValue = ws.Cells(i, 10).Value & ""
        If Len(cellValue) > 0 Then
            totalRelationships = totalRelationships + 1
            If InStr(cellValue, "-") > 0 Then
                leadsFound = leadsFound + 1
            End If
        End If
    Next i
    
    If totalRelationships > 0 Then
        RunCheck2 = 1 - (leadsFound / totalRelationships)
    Else
        RunCheck2 = 1
    End If
End Function

' Check 3: No Excessive Lags
Private Function RunCheck3(ws As Worksheet, lastRow As Long) As Double
    On Error Resume Next
    Dim i As Long, excessiveLags As Long, totalRelationships As Long
    Dim cellValue As String
    
    For i = 2 To lastRow
        cellValue = ws.Cells(i, 10).Value & ""
        If Len(cellValue) > 0 Then
            totalRelationships = totalRelationships + 1
            If InStr(cellValue, "+2") > 0 And _
               (InStr(cellValue, "+20") > 0 Or InStr(cellValue, "+21") > 0 Or _
                InStr(cellValue, "+22") > 0 Or InStr(cellValue, "+23") > 0 Or _
                InStr(cellValue, "+24") > 0 Or InStr(cellValue, "+25") > 0) Then
                excessiveLags = excessiveLags + 1
            End If
        End If
    Next i
    
    If totalRelationships > 0 Then
        RunCheck3 = 1 - (excessiveLags / totalRelationships)
    Else
        RunCheck3 = 1
    End If
End Function

' Check 4: Date Constraints
Private Function RunCheck4(ws As Worksheet, lastRow As Long) As Double
    On Error Resume Next
    Dim i As Long, constrainedTasks As Long, totalTasks As Long
    Dim constraintType As String
    
    For i = 2 To lastRow
        If ws.Cells(i, 5).Value <> "Summary" Then
            totalTasks = totalTasks + 1
            constraintType = ws.Cells(i, 12).Value & ""
            If Len(constraintType) > 0 And constraintType <> "As Soon As Possible" Then
                constrainedTasks = constrainedTasks + 1
            End If
        End If
    Next i
    
    If totalTasks > 0 Then
        RunCheck4 = 1 - (constrainedTasks / totalTasks)
    Else
        RunCheck4 = 1
    End If
End Function

' Check 5: Total Float
Private Function RunCheck5(ws As Worksheet, lastRow As Long) As Double
    On Error Resume Next
    Dim i As Long, reasonableFloat As Long, totalTasks As Long
    Dim floatValue As Double
    
    For i = 2 To lastRow
        If ws.Cells(i, 5).Value <> "Summary" Then
            totalTasks = totalTasks + 1
            If IsNumeric(ws.Cells(i, 15).Value) Then
                floatValue = CDbl(ws.Cells(i, 15).Value)
                If floatValue >= -5 And floatValue <= 44 Then
                    reasonableFloat = reasonableFloat + 1
                End If
            End If
        End If
    Next i
    
    If totalTasks > 0 Then
        RunCheck5 = reasonableFloat / totalTasks
    Else
        RunCheck5 = 1
    End If
End Function

' Check 6: Critical Path
Private Function RunCheck6(ws As Worksheet, lastRow As Long) As Double
    On Error Resume Next
    Dim i As Long, criticalTasks As Long, totalTasks As Long
    
    For i = 2 To lastRow
        If ws.Cells(i, 5).Value <> "Summary" Then
            totalTasks = totalTasks + 1
            If ws.Cells(i, 16).Value = "Yes" Or _
               (IsNumeric(ws.Cells(i, 15).Value) And CDbl(ws.Cells(i, 15).Value) = 0) Then
                criticalTasks = criticalTasks + 1
            End If
        End If
    Next i
    
    If totalTasks > 0 Then
        Dim criticalPercent As Double
        criticalPercent = criticalTasks / totalTasks
        If criticalPercent >= 0.1 And criticalPercent <= 0.3 Then
            RunCheck6 = 1
        Else
            RunCheck6 = 0.8
        End If
    Else
        RunCheck6 = 1
    End If
End Function

' Check 7: Duration Reasonableness
Private Function RunCheck7(ws As Worksheet, lastRow As Long) As Double
    On Error Resume Next
    Dim i As Long, reasonableDurations As Long, totalTasks As Long
    Dim duration As Double
    
    For i = 2 To lastRow
        If ws.Cells(i, 5).Value <> "Summary" Then
            totalTasks = totalTasks + 1
            If IsNumeric(ws.Cells(i, 8).Value) Then
                duration = CDbl(ws.Cells(i, 8).Value)
                If duration > 0 And duration <= 44 Then
                    reasonableDurations = reasonableDurations + 1
                End If
            End If
        End If
    Next i
    
    If totalTasks > 0 Then
        RunCheck7 = reasonableDurations / totalTasks
    Else
        RunCheck7 = 1
    End If
End Function

' Check 8: Resource Loading
Private Function RunCheck8(ws As Worksheet, lastRow As Long) As Double
    On Error Resume Next
    Dim i As Long, resourcedTasks As Long, totalWorkTasks As Long
    
    For i = 2 To lastRow
        If ws.Cells(i, 5).Value <> "Summary" And ws.Cells(i, 7).Value <> "Milestone" Then
            totalWorkTasks = totalWorkTasks + 1
            If Len(Trim(ws.Cells(i, 17).Value & "")) > 0 Then
                resourcedTasks = resourcedTasks + 1
            End If
        End If
    Next i
    
    If totalWorkTasks > 0 Then
        RunCheck8 = resourcedTasks / totalWorkTasks
    Else
        RunCheck8 = 1
    End If
End Function

' Check 9: Baseline Variance
Private Function RunCheck9(ws As Worksheet, lastRow As Long) As Double
    On Error Resume Next
    Dim i As Long, withinTolerance As Long, totalTasks As Long
    Dim variance As Long
    
    For i = 2 To lastRow
        If ws.Cells(i, 5).Value <> "Summary" Then
            totalTasks = totalTasks + 1
            If IsDate(ws.Cells(i, 6).Value) And IsDate(ws.Cells(i, 13).Value) Then
                variance = DateDiff("d", CDate(ws.Cells(i, 13).Value), CDate(ws.Cells(i, 6).Value))
                If Abs(variance) <= 10 Then
                    withinTolerance = withinTolerance + 1
                End If
            End If
        End If
    Next i
    
    If totalTasks > 0 Then
        RunCheck9 = withinTolerance / totalTasks
    Else
        RunCheck9 = 1
    End If
End Function

' Check 10: High Float
Private Function RunCheck10(ws As Worksheet, lastRow As Long) As Double
    On Error Resume Next
    Dim i As Long, excessiveFloat As Long, totalTasks As Long
    
    For i = 2 To lastRow
        If ws.Cells(i, 5).Value <> "Summary" Then
            totalTasks = totalTasks + 1
            If IsNumeric(ws.Cells(i, 15).Value) Then
                If CDbl(ws.Cells(i, 15).Value) > 44 Then
                    excessiveFloat = excessiveFloat + 1
                End If
            End If
        End If
    Next i
    
    If totalTasks > 0 Then
        RunCheck10 = 1 - (excessiveFloat / totalTasks)
    Else
        RunCheck10 = 1
    End If
End Function

' Check 11: Summary Task Logic
Private Function RunCheck11(ws As Worksheet, lastRow As Long) As Double
    On Error Resume Next
    Dim i As Long, summaryWithLogic As Long, totalSummary As Long
    
    For i = 2 To lastRow
        If ws.Cells(i, 5).Value = "Summary" Then
            totalSummary = totalSummary + 1
            If Len(Trim(ws.Cells(i, 10).Value & "")) > 0 Then
                summaryWithLogic = summaryWithLogic + 1
            End If
        End If
    Next i
    
    If totalSummary > 0 Then
        RunCheck11 = 1 - (summaryWithLogic / totalSummary)
    Else
        RunCheck11 = 1
    End If
End Function

' Check 12: Milestones
Private Function RunCheck12(ws As Worksheet, lastRow As Long) As Double
    On Error Resume Next
    Dim i As Long, correctMilestones As Long, totalMilestones As Long
    
    For i = 2 To lastRow
        If ws.Cells(i, 7).Value = "Milestone" Then
            totalMilestones = totalMilestones + 1
            If IsNumeric(ws.Cells(i, 8).Value) Then
                If CDbl(ws.Cells(i, 8).Value) = 0 Then
                    correctMilestones = correctMilestones + 1
                End If
            End If
        End If
    Next i
    
    If totalMilestones > 0 Then
        RunCheck12 = correctMilestones / totalMilestones
    Else
        RunCheck12 = 1
    End If
End Function

' Check 14: Progress Status
Private Function RunCheck14(ws As Worksheet, lastRow As Long) As Double
    On Error Resume Next
    Dim i As Long, hasProgress As Boolean
    
    For i = 2 To lastRow
        If IsNumeric(ws.Cells(i, 14).Value) Then
            If CDbl(ws.Cells(i, 14).Value) > 0 Then
                hasProgress = True
                Exit For
            End If
        End If
    Next i
    
    If hasProgress Then
        RunCheck14 = 0.95
    Else
        RunCheck14 = 0.5
    End If
End Function

' Get comment for each check
Private Function GetComment(checkNum As Integer, score As Double) As String
    Select Case checkNum
        Case 1
            If score < 0.95 Then
                GetComment = "Tasks missing logic relationships"
            Else
                GetComment = "All tasks properly linked"
            End If
        Case 2
            If score < 1 Then
                GetComment = "Negative lags found - review logic"
            Else
                GetComment = "No negative lags detected"
            End If
        Case 3
            If score < 1 Then
                GetComment = "Excessive lags detected (>20 days)"
            Else
                GetComment = "Lag durations within limits"
            End If
        Case 4
            If score < 0.95 Then
                GetComment = "Hard constraints limit flexibility"
            Else
                GetComment = "Schedule properly logic-driven"
            End If
        Case 5
            If score < 0.9 Then
                GetComment = "Float values outside normal range"
            Else
                GetComment = "Float values reasonable"
            End If
        Case 6
            If score < 1 Then
                GetComment = "Critical path may be incomplete"
            Else
                GetComment = "Critical path appears valid"
            End If
        Case 7
            If score < 0.95 Then
                GetComment = "Some task durations exceed 44 days"
            Else
                GetComment = "Task durations appropriate"
            End If
        Case 8
            If score < 0.8 Then
                GetComment = "Many tasks lack resource assignments"
            Else
                GetComment = "Resources properly assigned"
            End If
        Case 9
            If score < 0.8 Then
                GetComment = "Significant baseline variance detected"
            Else
                GetComment = "Schedule tracking to baseline"
            End If
        Case 10
            If score < 0.95 Then
                GetComment = "Tasks with excessive float detected"
            Else
                GetComment = "Float within acceptable range"
            End If
        Case 11
            If score < 1 Then
                GetComment = "Summary tasks should not have logic"
            Else
                GetComment = "No logic on summary tasks"
            End If
        Case 12
            If score < 1 Then
                GetComment = "Milestones must have zero duration"
            Else
                GetComment = "All milestones properly defined"
            End If
        Case 13
            If score < 0.8 Then
                GetComment = "Insufficient schedule margin"
            Else
                GetComment = "Adequate schedule margin exists"
            End If
        Case 14
            If score < 0.8 Then
                GetComment = "Status date not current"
            Else
                GetComment = "Progress status is current"
            End If
        Case Else
            GetComment = ""
    End Select
End Function
