Option Explicit

Sub ScheduleHealthCheck()
    ' 14-Point Schedule Health Check Macro for MS Project
    ' Based on DAU EVM and Schedule Health Analysis best practices
    
    Dim proj As Project
    Dim t As Task
    Dim i As Integer
    Dim checkResults(1 To 14) As String
    Dim checkScores(1 To 14) As Double
    Dim score As Double
    
    ' Set active project
    Set proj = ActiveProject
    
    If proj Is Nothing Then
        MsgBox "No project is open!", vbExclamation
        Exit Sub
    End If
    
    ' Initialize check descriptions
    checkResults(1) = "Logic Check - Missing Dependencies"
    checkResults(2) = "No Negative Lag Time"
    checkResults(3) = "No Excessive Lags (>20 days)"
    checkResults(4) = "Minimal Hard Constraints"
    checkResults(5) = "Total Float Reasonableness"
    checkResults(6) = "Critical Path Integrity"
    checkResults(7) = "Task Duration Reasonableness"
    checkResults(8) = "Resource Assignment Check"
    checkResults(9) = "Baseline Date Variance"
    checkResults(10) = "No Excessive Float (>44 days)"
    checkResults(11) = "No Logic on Summary Tasks"
    checkResults(12) = "Milestone Duration = 0"
    checkResults(13) = "Adequate Schedule Margin"
    checkResults(14) = "Status Date Currency"
    
    ' Run all checks
    checkScores(1) = Check1_Logic(proj)
    checkScores(2) = Check2_NoLeads(proj)
    checkScores(3) = Check3_NoExcessiveLags(proj)
    checkScores(4) = Check4_DateConstraints(proj)
    checkScores(5) = Check5_TotalFloat(proj)
    checkScores(6) = Check6_CriticalPath(proj)
    checkScores(7) = Check7_DurationReasonableness(proj)
    checkScores(8) = Check8_ResourceLoading(proj)
    checkScores(9) = Check9_BaselineVariance(proj)
    checkScores(10) = Check10_HighFloat(proj)
    checkScores(11) = Check11_SummaryTaskLogic(proj)
    checkScores(12) = Check12_Milestones(proj)
    checkScores(13) = Check13_ScheduleMargin(proj)
    checkScores(14) = Check14_ProgressStatus(proj)
    
    ' Calculate overall score
    score = 0
    For i = 1 To 14
        score = score + checkScores(i)
    Next i
    score = score / 14
    
    ' Display results
    Call DisplayResults(checkResults, checkScores, score)
    
End Sub

Function Check1_Logic(proj As Project) As Double
    ' Check for tasks missing predecessors/successors
    Dim t As Task
    Dim tasksWithoutLogic As Long
    Dim nonSummaryTasks As Long
    
    For Each t In proj.Tasks
        If Not t Is Nothing Then
            If Not t.Summary And t.Active Then
                nonSummaryTasks = nonSummaryTasks + 1
                If t.Predecessors = "" And t.Successors = "" Then
                    ' Exclude project start and finish milestones
                    If t.ID <> 1 And t.Name <> "Project Start" And t.Name <> "Project Complete" Then
                        tasksWithoutLogic = tasksWithoutLogic + 1
                    End If
                End If
            End If
        End If
    Next t
    
    If nonSummaryTasks > 0 Then
        Check1_Logic = 1 - (tasksWithoutLogic / nonSummaryTasks)
    Else
        Check1_Logic = 1
    End If
End Function

Function Check2_NoLeads(proj As Project) As Double
    ' Check for negative lag (leads)
    Dim t As Task
    Dim td As TaskDependency
    Dim leadsFound As Long
    Dim totalDependencies As Long
    
    For Each t In proj.Tasks
        If Not t Is Nothing Then
            For Each td In t.TaskDependencies
                totalDependencies = totalDependencies + 1
                If td.Lag < 0 Then
                    leadsFound = leadsFound + 1
                End If
            Next td
        End If
    Next t
    
    If totalDependencies > 0 Then
        Check2_NoLeads = 1 - (leadsFound / totalDependencies)
    Else
        Check2_NoLeads = 1
    End If
End Function

Function Check3_NoExcessiveLags(proj As Project) As Double
    ' Check for excessive lags (>20 days)
    Dim t As Task
    Dim td As TaskDependency
    Dim excessiveLags As Long
    Dim totalDependencies As Long
    
    For Each t In proj.Tasks
        If Not t Is Nothing Then
            For Each td In t.TaskDependencies
                totalDependencies = totalDependencies + 1
                ' Convert lag to days (lag is in minutes)
                If td.Lag / 480 > 20 Then ' 480 minutes = 8 hours = 1 day
                    excessiveLags = excessiveLags + 1
                End If
            Next td
        End If
    Next t
    
    If totalDependencies > 0 Then
        Check3_NoExcessiveLags = 1 - (excessiveLags / totalDependencies)
    Else
        Check3_NoExcessiveLags = 1
    End If
End Function

Function Check4_DateConstraints(proj As Project) As Double
    ' Check for hard constraints
    Dim t As Task
    Dim constrainedTasks As Long
    Dim totalTasks As Long
    
    For Each t In proj.Tasks
        If Not t Is Nothing Then
            If Not t.Summary And t.Active Then
                totalTasks = totalTasks + 1
                ' Check for hard constraints using numeric values
                ' 0 = As Soon As Possible (ASAP)
                ' 1 = As Late As Possible (ALAP)
                ' 2 = Must Start On (MSO)
                ' 3 = Must Finish On (MFO)
                ' 4 = Start No Earlier Than (SNET)
                ' 5 = Start No Later Than (SNLT)
                ' 6 = Finish No Earlier Than (FNET)
                ' 7 = Finish No Later Than (FNLT)
                Select Case t.ConstraintType
                    Case 2, 3, 4, 5, 6, 7  ' All constraints except ASAP and ALAP
                        constrainedTasks = constrainedTasks + 1
                End Select
            End If
        End If
    Next t
    
    If totalTasks > 0 Then
        Check4_DateConstraints = 1 - (constrainedTasks / totalTasks)
    Else
        Check4_DateConstraints = 1
    End If
End Function

Function Check5_TotalFloat(proj As Project) As Double
    ' Check for reasonable total float
    Dim t As Task
    Dim reasonableFloat As Long
    Dim totalTasks As Long
    Dim floatDays As Double
    
    For Each t In proj.Tasks
        If Not t Is Nothing Then
            If Not t.Summary And t.Active Then
                totalTasks = totalTasks + 1
                floatDays = t.TotalSlack / 480 ' Convert to days
                If floatDays >= -5 And floatDays <= 44 Then
                    reasonableFloat = reasonableFloat + 1
                End If
            End If
        End If
    Next t
    
    If totalTasks > 0 Then
        Check5_TotalFloat = reasonableFloat / totalTasks
    Else
        Check5_TotalFloat = 1
    End If
End Function

Function Check6_CriticalPath(proj As Project) As Double
    ' Check critical path integrity
    Dim t As Task
    Dim criticalTasks As Long
    Dim totalTasks As Long
    Dim criticalPercent As Double
    
    For Each t In proj.Tasks
        If Not t Is Nothing Then
            If Not t.Summary And t.Active Then
                totalTasks = totalTasks + 1
                If t.Critical Then
                    criticalTasks = criticalTasks + 1
                End If
            End If
        End If
    Next t
    
    If totalTasks > 0 Then
        criticalPercent = criticalTasks / totalTasks
        ' Critical path should be 10-30% of tasks
        If criticalPercent >= 0.1 And criticalPercent <= 0.3 Then
            Check6_CriticalPath = 1
        Else
            Check6_CriticalPath = 0.8
        End If
    Else
        Check6_CriticalPath = 1
    End If
End Function

Function Check7_DurationReasonableness(proj As Project) As Double
    ' Check for reasonable task durations
    Dim t As Task
    Dim reasonableDurations As Long
    Dim totalTasks As Long
    Dim durationDays As Double
    
    For Each t In proj.Tasks
        If Not t Is Nothing Then
            If Not t.Summary And t.Active And Not t.Milestone Then
                totalTasks = totalTasks + 1
                durationDays = t.Duration / 480 ' Convert to days
                If durationDays > 0 And durationDays <= 44 Then
                    reasonableDurations = reasonableDurations + 1
                End If
            End If
        End If
    Next t
    
    If totalTasks > 0 Then
        Check7_DurationReasonableness = reasonableDurations / totalTasks
    Else
        Check7_DurationReasonableness = 1
    End If
End Function

Function Check8_ResourceLoading(proj As Project) As Double
    ' Check for resource assignments
    Dim t As Task
    Dim resourcedTasks As Long
    Dim totalWorkTasks As Long
    
    For Each t In proj.Tasks
        If Not t Is Nothing Then
            If Not t.Summary And t.Active And Not t.Milestone Then
                totalWorkTasks = totalWorkTasks + 1
                If t.Assignments.Count > 0 Then
                    resourcedTasks = resourcedTasks + 1
                End If
            End If
        End If
    Next t
    
    If totalWorkTasks > 0 Then
        Check8_ResourceLoading = resourcedTasks / totalWorkTasks
    Else
        Check8_ResourceLoading = 1
    End If
End Function

Function Check9_BaselineVariance(proj As Project) As Double
    ' Check baseline variance
    Dim t As Task
    Dim withinTolerance As Long
    Dim totalTasks As Long
    Dim variance As Long
    
    For Each t In proj.Tasks
        If Not t Is Nothing Then
            If Not t.Summary And t.Active Then
                If Not IsEmpty(t.BaselineStart) And t.BaselineStart <> "NA" Then
                    totalTasks = totalTasks + 1
                    variance = DateDiff("d", t.BaselineStart, t.Start)
                    If Abs(variance) <= 10 Then
                        withinTolerance = withinTolerance + 1
                    End If
                End If
            End If
        End If
    Next t
    
    If totalTasks > 0 Then
        Check9_BaselineVariance = withinTolerance / totalTasks
    Else
        Check9_BaselineVariance = 1
    End If
End Function

Function Check10_HighFloat(proj As Project) As Double
    ' Check for excessive float
    Dim t As Task
    Dim excessiveFloat As Long
    Dim totalTasks As Long
    Dim floatDays As Double
    
    For Each t In proj.Tasks
        If Not t Is Nothing Then
            If Not t.Summary And t.Active Then
                totalTasks = totalTasks + 1
                floatDays = t.TotalSlack / 480 ' Convert to days
                If floatDays > 44 Then
                    excessiveFloat = excessiveFloat + 1
                End If
            End If
        End If
    Next t
    
    If totalTasks > 0 Then
        Check10_HighFloat = 1 - (excessiveFloat / totalTasks)
    Else
        Check10_HighFloat = 1
    End If
End Function

Function Check11_SummaryTaskLogic(proj As Project) As Double
    ' Check for logic on summary tasks
    Dim t As Task
    Dim summaryWithLogic As Long
    Dim totalSummary As Long
    
    For Each t In proj.Tasks
        If Not t Is Nothing Then
            If t.Summary And t.Active Then
                totalSummary = totalSummary + 1
                If t.Predecessors <> "" Or t.Successors <> "" Then
                    summaryWithLogic = summaryWithLogic + 1
                End If
            End If
        End If
    Next t
    
    If totalSummary > 0 Then
        Check11_SummaryTaskLogic = 1 - (summaryWithLogic / totalSummary)
    Else
        Check11_SummaryTaskLogic = 1
    End If
End Function

Function Check12_Milestones(proj As Project) As Double
    ' Check milestone durations
    Dim t As Task
    Dim correctMilestones As Long
    Dim totalMilestones As Long
    
    For Each t In proj.Tasks
        If Not t Is Nothing Then
            If t.Milestone And t.Active Then
                totalMilestones = totalMilestones + 1
                If t.Duration = 0 Then
                    correctMilestones = correctMilestones + 1
                End If
            End If
        End If
    Next t
    
    If totalMilestones > 0 Then
        Check12_Milestones = correctMilestones / totalMilestones
    Else
        Check12_Milestones = 1
    End If
End Function

Function Check13_ScheduleMargin(proj As Project) As Double
    ' Check schedule margin
    Dim projectFinish As Date
    Dim constraintDate As Date
    Dim margin As Long
    Dim t As Task
    
    projectFinish = proj.ProjectFinish
    
    ' Look for project deadline in several ways:
    ' Option 1: Check for a milestone named "Contract End" or "Deadline"
    For Each t In proj.Tasks
        If Not t Is Nothing Then
            If t.Milestone And (InStr(UCase(t.Name), "DEADLINE") > 0 Or _
                               InStr(UCase(t.Name), "CONTRACT") > 0 Or _
                               InStr(UCase(t.Name), "DELIVERY") > 0) Then
                constraintDate = t.Finish
                Exit For
            End If
        End If
    Next t
    
    ' Option 2: If no deadline milestone found, check enterprise custom fields
    ' You may need to adjust this based on your organization's custom fields
    On Error Resume Next
    If constraintDate = 0 Then
        ' Try to get from project custom field (example: Finish1)
        constraintDate = proj.ProjectSummaryTask.Finish1
    End If
    On Error GoTo 0
    
    ' Option 3: Look for the last task in the schedule
    If constraintDate = 0 Then
        Dim lastDate As Date
        lastDate = 0
        For Each t In proj.Tasks
            If Not t Is Nothing And Not t.Summary Then
                If t.Finish > lastDate Then
                    lastDate = t.Finish
                End If
            End If
        Next t
        ' Use last task date plus buffer as constraint
        If lastDate > 0 Then
            constraintDate = DateAdd("d", 30, lastDate) ' 30 day buffer
        End If
    End If
    
    ' Calculate margin
    If constraintDate > 0 And constraintDate > projectFinish Then
        margin = DateDiff("d", projectFinish, constraintDate)
        If margin >= 10 Then ' At least 10 days margin
            Check13_ScheduleMargin = 1
        ElseIf margin >= 5 Then
            Check13_ScheduleMargin = 0.8
        ElseIf margin >= 0 Then
            Check13_ScheduleMargin = 0.6
        Else
            Check13_ScheduleMargin = 0.3
        End If
    Else
        ' Default score if no valid constraint date found
        Check13_ScheduleMargin = 0.9
    End If
End Function

Function Check14_ProgressStatus(proj As Project) As Double
    ' Check if status date is current
    Dim statusDate As Date
    Dim daysSinceUpdate As Long
    
    statusDate = proj.StatusDate
    
    If statusDate > 0 Then
        daysSinceUpdate = DateDiff("d", statusDate, Date)
        If daysSinceUpdate <= 7 Then ' Updated within a week
            Check14_ProgressStatus = 1
        ElseIf daysSinceUpdate <= 14 Then
            Check14_ProgressStatus = 0.8
        Else
            Check14_ProgressStatus = 0.5
        End If
    Else
        Check14_ProgressStatus = 0.5
    End If
End Function

Sub DisplayResults(checkResults() As String, checkScores() As Double, overallScore As Double)
    ' Display results in a formatted report
    Dim reportText As String
    Dim i As Integer
    Dim status As String
    
    reportText = "14-POINT SCHEDULE HEALTH CHECK RESULTS" & vbCrLf
    reportText = reportText & "======================================" & vbCrLf & vbCrLf
    reportText = reportText & "Project: " & ActiveProject.Name & vbCrLf
    reportText = reportText & "Date: " & Format(Date, "mm/dd/yyyy") & vbCrLf & vbCrLf
    
    For i = 1 To 14
        If checkScores(i) >= 0.95 Then
            status = "PASS"
        ElseIf checkScores(i) >= 0.8 Then
            status = "MARGINAL"
        Else
            status = "FAIL"
        End If
        
        reportText = reportText & Format(i, "00") & ". " & checkResults(i) & vbCrLf
        reportText = reportText & "    Score: " & Format(checkScores(i), "0%") & " - " & status & vbCrLf & vbCrLf
    Next i
    
    reportText = reportText & "======================================" & vbCrLf
    reportText = reportText & "OVERALL SCHEDULE HEALTH SCORE: " & Format(overallScore, "0%") & vbCrLf
    
    If overallScore >= 0.95 Then
        reportText = reportText & "Status: EXCELLENT - Schedule is well-constructed" & vbCrLf
    ElseIf overallScore >= 0.8 Then
        reportText = reportText & "Status: GOOD - Minor issues need attention" & vbCrLf
    ElseIf overallScore >= 0.6 Then
        reportText = reportText & "Status: FAIR - Several issues require correction" & vbCrLf
    Else
        reportText = reportText & "Status: POOR - Major schedule issues detected" & vbCrLf
    End If
    
    ' Display in message box (you could also write to a file or custom field)
    MsgBox reportText, vbInformation, "Schedule Health Check Results"
    
    ' Optional: Write to Notes field of project summary task
    ActiveProject.ProjectSummaryTask.Notes = reportText
    
End Sub
